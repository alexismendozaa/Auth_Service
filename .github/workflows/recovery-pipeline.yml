name: Docker Image Build and Deploy

# Trigger the workflow on push to the "test" branch
on:
  push:
    branches:
      - test  # The action will run when there is a push to the "test" branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository to access the Dockerfile and other files
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up Docker Buildx (for advanced build features, if needed)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to DockerHub using GitHub secrets for authentication
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}  # DockerHub username from GitHub Secrets
          password: ${{ secrets.DOCKERHUB_TOKEN }}    # DockerHub token from GitHub Secrets

      # Step 4: Build the Docker image using the Dockerfile
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/recovery-ms:latest .

      # Step 5: Push the Docker image to DockerHub
      - name: Push Docker image to DockerHub
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/recovery-ms:latest

      # Step 6: SSH into EC2 and deploy the Docker container
      - name: SSH to EC2 and deploy Docker container
        uses: appleboy/ssh-action@v0.1.0
        with:
          host: ${{ secrets.RECOVERY_EC2_HOST }}  # EC2 host from GitHub Secrets
          username: ${{ secrets.EC2_SSH_KEY }}    # SSH key for EC2 from GitHub Secrets
          key: ${{ secrets.EC2_SSH_KEY }}         # SSH key for EC2 from GitHub Secrets
          script: |
            # 6.1 Stop and remove any existing container named "recovery-ms" (if it exists)
            docker stop recovery-ms || true
            docker rm recovery-ms || true

            # 6.2 Pull the latest Docker image from DockerHub
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/recovery-ms:latest

            # 6.3 Run the Docker container with the necessary environment variables
            docker run -d --name recovery-ms -p 8002:3002 \
              -e APP_URL=${{ secrets.APP_URL }} \
              -e DB_HOST=${{ secrets.DB_HOST }} \
              -e DB_NAME=${{ secrets.DB_NAME }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e DB_USER=${{ secrets.DB_USER }} \
              -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
              -e JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }} \
              -e EMAIL_USER=${{ secrets.EMAIL_USER }} \
              -e EMAIL_PASS=${{ secrets.EMAIL_PASS }} \
              -e S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }} \
              ${{ secrets.DOCKERHUB_USERNAME }}/recovery-ms:latest

            # 6.4 Verify if the container is running using "docker ps"
            docker ps -q --filter "name=recovery-ms" || exit 1
            # If the container is not running, "docker ps" will fail, which will cause an "exit 1" and mark the action as failed
