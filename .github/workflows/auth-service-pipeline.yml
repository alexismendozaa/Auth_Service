name: Docker Build and Deploy

on:
  push:
    branches:
      - test

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
    # Paso 1: Checkout del código
    - name: Check out code
      uses: actions/checkout@v2

    # Paso 2: Instalar Docker Compose
    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    # Paso 3: Construir las imágenes con docker-compose
    - name: Build Docker images using Docker Compose
      run: |
        docker-compose -f docker-compose.yml build

    # Paso 4: Subir las imágenes a Docker Hub
    - name: Push Docker images to Docker Hub
      run: |
        docker-compose -f docker-compose.yml push
      env:
        DOCKER_CLI_EXPERIMENTAL: enabled
        DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}

    # Paso 5: Conectar a EC2 y ejecutar los contenedores directamente desde Docker Hub
    - name: Deploy to EC2 via SSH
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.EC2_QA }}  # Usar la IP pública de EC2 (secreto EC2_QA)
        username: ubuntu  # Usuario
        key: ${{ secrets.SSH_KEY_QA }}  # Usar el secreto SSH_KEY_QA (clave privada)
        port: 22
        debug: true  # Habilitar depuración para obtener más detalles
        script: |
          # Exportar las variables de entorno necesarias
          export DB_HOST=${{ secrets.DB_HOST }}
          export DB_NAME=${{ secrets.DB_NAME }}
          export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          export DB_USER=${{ secrets.DB_USER }}
          export JWT_SECRET=${{ secrets.JWT_SECRET }}
          export JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}
          export S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
          export SIGHTENGINE_API_KEY=${{ secrets.SIGHTENGINE_API_KEY }}
          export SIGHTENGINE_API_USER=${{ secrets.SIGHTENGINE_API_USER }}

          # Descargar las imágenes de Docker desde Docker Hub
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/analysis-avatar-ms:latest
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/login-ms:latest
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/recovery-ms:latest
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/register-ms:latest
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/reset-ms:latest

          # Ejecutar los contenedores con las imágenes descargadas
          docker run -d --name analysis-avatar-ms \
            -p 5029:3029 \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/analysis-avatar-ms:latest

          docker run -d --name login-ms \
            -p 5001:3001 \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/login-ms:latest

          docker run -d --name recovery-ms \
            -p 5002:3002 \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/recovery-ms:latest

          docker run -d --name register-ms \
            -p 5000:3000 \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/register-ms:latest

          docker run -d --name reset-ms \
            -p 5003:3003 \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/reset-ms:latest
