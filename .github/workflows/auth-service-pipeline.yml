name: Docker Build and Deploy

on:
  push:
    branches:
      - test

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
    # Paso 1: Checkout del código
    - name: Check out code
      uses: actions/checkout@v2

    # Paso 2: Loguearse en Docker Hub antes de construir las imágenes
    - name: Log in to Docker Hub
      run: |
        echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

    # Paso 3: Instalar Docker Compose
    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    # Paso 4: Construir las imágenes con docker-compose
    - name: Build Docker images using Docker Compose
      run: |
        docker-compose -f docker-compose.yml build

    # Paso 5: Subir las imágenes a Docker Hub
    - name: Push Docker images to Docker Hub
      run: |
        docker-compose -f docker-compose.yml push

    # Paso 6: Conectar a EC2 y detener y eliminar contenedores previos
    - name: Clean up existing containers on EC2
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.EC2_QA }}
        username: ubuntu
        key: ${{ secrets.SSH_KEY_QA }}
        port: 22
        debug: true
        script: |
          # Detener y eliminar contenedores existentes
          docker stop $(docker ps -aq) || true
          docker rm $(docker ps -aq) || true
          docker system prune -af || true

    # Paso 7: Conectar a EC2 y ejecutar los nuevos contenedores desde Docker Hub
    - name: Deploy to EC2 via SSH
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.EC2_QA }}  # Usar la IP pública de EC2 (secreto EC2_QA)
        username: ubuntu  # Usuario
        key: ${{ secrets.SSH_KEY_QA }}  # Usar el secreto SSH_KEY_QA (clave privada)
        port: 22
        debug: true  # Habilitar depuración para obtener más detalles
        script: |
          # Exportar las variables de entorno necesarias para cada contenedor
          
          # Variables comunes
          export DB_HOST=${{ secrets.DB_HOST }}
          export DB_USER=${{ secrets.DB_USER }}
          export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          export DB_NAME=${{ secrets.DB_NAME }}
          export JWT_SECRET=${{ secrets.JWT_SECRET }}
          export JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}
          export S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
          export AWS_REGION=${{ secrets.AWS_REGION }}
          export SIGHTENGINE_API_KEY=${{ secrets.SIGHTENGINE_API_KEY }}
          export SIGHTENGINE_API_USER=${{ secrets.SIGHTENGINE_API_USER }}
          export EMAIL_USER=${{ secrets.EMAIL_USER }}
          export EMAIL_PASS=${{ secrets.EMAIL_PASS }}
          export APP_URL=${{ secrets.APP_URL }}

          # Contenedor Analysis - con variables específicas para Analysis
          docker run -d --name analysis-avatar-ms \
            -p 5029:3029 \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
            -e JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }} \
            -e S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }} \
            -e AWS_REGION=${{ secrets.AWS_REGION }} \
            -e SIGHTENGINE_API_KEY=${{ secrets.SIGHTENGINE_API_KEY }} \
            -e SIGHTENGINE_API_USER=${{ secrets.SIGHTENGINE_API_USER }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/analysis-avatar-ms:latest

          # Contenedor Login - con variables específicas para Login
          docker run -d --name login-ms \
            -p 5001:3001 \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
            -e JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }} \
            -e S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }} \
            -e S3_ACCESS_KEY_ID=${{ secrets.S3_ACCESS_KEY_ID }} \
            -e S3_SECRET_ACCESS_KEY=${{ secrets.S3_SECRET_ACCESS_KEY }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/login-ms:latest

          # Contenedor Recovery - con variables específicas para Recovery
          docker run -d --name recovery-ms \
            -p 5002:3002 \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            -e EMAIL_USER=${{ secrets.EMAIL_USER }} \
            -e EMAIL_PASS=${{ secrets.EMAIL_PASS }} \
            -e APP_URL=${{ secrets.APP_URL }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/recovery-ms:latest

          # Contenedor Register - con variables específicas para Register
          docker run -d --name register-ms \
            -p 5025:3025 \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
            -e JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }} \
            -e S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }} \
            -e AWS_REGION=${{ secrets.AWS_REGION }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/register-ms:latest

          # Contenedor Reset - con variables específicas para Reset
          docker run -d --name reset-ms \
            -p 5003:3003 \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            -e EMAIL_USER=${{ secrets.EMAIL_USER }} \
            -e EMAIL_PASS=${{ secrets.EMAIL_PASS }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/reset-ms:latest
