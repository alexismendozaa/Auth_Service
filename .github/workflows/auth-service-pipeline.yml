name: CI-CD Auth Microservices

on:
  push:
    branches: [main, test]
    paths:
      - 'analysis-avatar-ms/**'
      - 'login-ms/**'
      - 'recovery-ms/**'
      - 'register-ms/**'
      - 'reset-ms/**'
  pull_request:
    branches: [main]
    paths:
      - 'analysis-avatar-ms/**'
      - 'login-ms/**'
      - 'recovery-ms/**'
      - 'register-ms/**'
      - 'reset-ms/**'

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  # 1. TESTS
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - analysis-avatar-ms
          - login-ms
          - recovery-ms
          - register-ms
          - reset-ms
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Detect if this service changed in the commit/PR
      - name: Detect changes for service
        id: changes
        run: |
          git fetch --prune --unshallow || git fetch --all
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            git fetch origin ${{ github.base_ref }}
            CHANGED=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep "^${{ matrix.service }}/" || true)
          else
            CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep "^${{ matrix.service }}/" || true)
          fi
          if [[ -n "$CHANGED" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Run tests
        if: steps.changes.outputs.changed == 'true'
        run: |
          cd ${{ matrix.service }}
          npm ci
          npm test

  # 2. BUILD
  build:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        service:
          - analysis-avatar-ms
          - login-ms
          - recovery-ms
          - register-ms
          - reset-ms
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes for service
        id: changes
        run: |
          git fetch --prune --unshallow || git fetch --all
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            git fetch origin ${{ github.base_ref }}
            CHANGED=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep "^${{ matrix.service }}/" || true)
          else
            CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep "^${{ matrix.service }}/" || true)
          fi
          if [[ -n "$CHANGED" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Build Docker image
        if: steps.changes.outputs.changed == 'true'
        run: |
          docker build -t alexismendozaa/${{ matrix.service }}:latest ./${{ matrix.service }}

      - name: Save Docker image artifact
        if: steps.changes.outputs.changed == 'true'
        run: docker save alexismendozaa/${{ matrix.service }}:latest -o ${{ matrix.service }}.tar

      - uses: actions/upload-artifact@v4
        if: steps.changes.outputs.changed == 'true'
        with:
          name: ${{ matrix.service }}-image
          path: ${{ matrix.service }}.tar

  # 3. PUSH
  push:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        service:
          - analysis-avatar-ms
          - login-ms
          - recovery-ms
          - register-ms
          - reset-ms
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes for service
        id: changes
        run: |
          git fetch --prune --unshallow || git fetch --all
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            git fetch origin ${{ github.base_ref }}
            CHANGED=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep "^${{ matrix.service }}/" || true)
          else
            CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep "^${{ matrix.service }}/" || true)
          fi
          if [[ -n "$CHANGED" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - uses: actions/download-artifact@v4
        if: steps.changes.outputs.changed == 'true'
        with:
          name: ${{ matrix.service }}-image

      - name: Load Docker image
        if: steps.changes.outputs.changed == 'true'
        run: docker load -i ${{ matrix.service }}.tar

      - name: Login to Docker Hub
        if: steps.changes.outputs.changed == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Push Docker image
        if: steps.changes.outputs.changed == 'true'
        run: docker push alexismendozaa/${{ matrix.service }}:latest

  # 4. DEPLOY
  deploy:
    runs-on: ubuntu-latest
    needs: push
    strategy:
      matrix:
        service:
          - analysis-avatar-ms
          - login-ms
          - recovery-ms
          - register-ms
          - reset-ms
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes for service
        id: changes
        run: |
          git fetch --prune --unshallow || git fetch --all
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            git fetch origin ${{ github.base_ref }}
            CHANGED=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep "^${{ matrix.service }}/" || true)
          else
            CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep "^${{ matrix.service }}/" || true)
          fi
          if [[ -n "$CHANGED" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Select environment and SSH key
        if: steps.changes.outputs.changed == 'true'
        id: select-env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/test" ]]; then
            echo "host=${{ secrets.EC2_QA }}" >> $GITHUB_OUTPUT
            echo "key<<EOF" >> $GITHUB_OUTPUT
            echo "${{ secrets.SSH_KEY_QA }}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "host=${{ secrets.EC2_PROD }}" >> $GITHUB_OUTPUT
            echo "key<<EOF" >> $GITHUB_OUTPUT
            echo "${{ secrets.SSH_KEY_PROD }}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Deploy updated microservice to EC2 via SSH
        if: steps.changes.outputs.changed == 'true'
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ steps.select-env.outputs.host }}
          username: ubuntu
          key: ${{ steps.select-env.outputs.key }}
          port: 22
          script: |
            docker rm -f ${{ matrix.service }} || true

            export DB_HOST='${{ secrets.DB_HOST }}'
            export DB_USER='${{ secrets.DB_USER }}'
            export DB_PASSWORD='${{ secrets.DB_PASSWORD }}'
            export DB_NAME='${{ secrets.DB_NAME }}'
            export JWT_SECRET='${{ secrets.JWT_SECRET }}'
            export JWT_EXPIRATION='${{ secrets.JWT_EXPIRATION }}'
            export S3_BUCKET_NAME='${{ secrets.S3_BUCKET_NAME }}'
            export AWS_REGION='${{ secrets.AWS_REGION }}'
            export SIGHTENGINE_API_KEY='${{ secrets.SIGHTENGINE_API_KEY }}'
            export SIGHTENGINE_API_USER='${{ secrets.SIGHTENGINE_API_USER }}'
            export EMAIL_USER='${{ secrets.EMAIL_USER }}'
            export EMAIL_PASS='${{ secrets.EMAIL_PASS }}'
            export APP_URL='${{ secrets.APP_URL }}'

            if [ "${{ matrix.service }}" = "analysis-avatar-ms" ]; then
              docker run -d --name analysis-avatar-ms \
                -p 5029:3029 \
                -e DB_HOST=$DB_HOST \
                -e DB_USER=$DB_USER \
                -e DB_PASSWORD=$DB_PASSWORD \
                -e DB_NAME=$DB_NAME \
                -e JWT_SECRET=$JWT_SECRET \
                -e JWT_EXPIRATION=$JWT_EXPIRATION \
                -e S3_BUCKET_NAME=$S3_BUCKET_NAME \
                -e AWS_REGION=$AWS_REGION \
                -e SIGHTENGINE_API_KEY=$SIGHTENGINE_API_KEY \
                -e SIGHTENGINE_API_USER=$SIGHTENGINE_API_USER \
                alexismendozaa/analysis-avatar-ms:latest

            elif [ "${{ matrix.service }}" = "login-ms" ]; then
              docker run -d --name login-ms \
                -p 5001:3001 \
                -e DB_HOST=$DB_HOST \
                -e DB_USER=$DB_USER \
                -e DB_PASSWORD=$DB_PASSWORD \
                -e DB_NAME=$DB_NAME \
                -e JWT_SECRET=$JWT_SECRET \
                -e JWT_EXPIRATION=$JWT_EXPIRATION \
                -e S3_BUCKET_NAME=$S3_BUCKET_NAME \
                alexismendozaa/login-ms:latest

            elif [ "${{ matrix.service }}" = "recovery-ms" ]; then
              docker run -d --name recovery-ms \
                -p 5002:3002 \
                -e DB_HOST=$DB_HOST \
                -e DB_USER=$DB_USER \
                -e DB_PASSWORD=$DB_PASSWORD \
                -e DB_NAME=$DB_NAME \
                -e EMAIL_USER=$EMAIL_USER \
                -e EMAIL_PASS=$EMAIL_PASS \
                -e APP_URL=$APP_URL \
                alexismendozaa/recovery-ms:latest

            elif [ "${{ matrix.service }}" = "register-ms" ]; then
              docker run -d --name register-ms \
                -p 5025:3025 \
                -e DB_HOST=$DB_HOST \
                -e DB_USER=$DB_USER \
                -e DB_PASSWORD=$DB_PASSWORD \
                -e DB_NAME=$DB_NAME \
                -e JWT_SECRET=$JWT_SECRET \
                -e JWT_EXPIRATION=$JWT_EXPIRATION \
                -e S3_BUCKET_NAME=$S3_BUCKET_NAME \
                -e AWS_REGION=$AWS_REGION \
                alexismendozaa/register-ms:latest

            elif [ "${{ matrix.service }}" = "reset-ms" ]; then
              docker run -d --name reset-ms \
                -p 5003:3003 \
                -e DB_HOST=$DB_HOST \
                -e DB_USER=$DB_USER \
                -e DB_PASSWORD=$DB_PASSWORD \
                -e DB_NAME=$DB_NAME \
                -e EMAIL_USER=$EMAIL_USER \
                -e EMAIL_PASS=$EMAIL_PASS \
                alexismendozaa/reset-ms:latest
            fi
