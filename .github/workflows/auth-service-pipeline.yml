name: Login Service CI/CD

on:
  push:
    branches: [test]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Checkout del repositorio
      - name: Checkout repository
        uses: actions/checkout@v3

      # Paso 2: Configuración de Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Paso 3: Login en Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Paso 4: Construir y subir la imagen a Docker Hub
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./login-ms
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/login-ms:latest
          build-args: |
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_HOST=${{ secrets.DB_HOST }}

  deploy-to-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      # Paso 1: Instalar la clave SSH en el runner
      - name: Install SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2_key  # Cargar la clave privada desde los secretos de GitHub
          chmod 600 ~/.ssh/ec2_key  # Asegurarse de que la clave tenga los permisos adecuados
          ssh-keyscan ${{ secrets.LOGIN_EC2_HOST }} >> ~/.ssh/known_hosts  # Añadir la clave del host de EC2 a known_hosts

      # Paso 2: Verificar la conexión SSH a EC2
      - name: Verify SSH connection
        run: |
          ssh -i ~/.ssh/ec2_key ubuntu@${{ secrets.LOGIN_EC2_HOST }} "echo 'SSH connection successful!'"

      # Paso 3: Desplegar a EC2
      - name: Deploy to EC2
        run: |
          ssh -i ~/.ssh/ec2_key ubuntu@${{ secrets.LOGIN_EC2_HOST }} << 'EOF'
          # Detener y eliminar el contenedor existente
          sudo docker stop login-ms || true
          sudo docker rm login-ms || true
          
          # Descargar la última imagen desde Docker Hub
          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/login-ms:latest
          
          # Ejecutar un nuevo contenedor con las variables de entorno
          sudo docker run -d \
            --name login-ms \
            -p 8001:3001 \
            --restart unless-stopped \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            -e S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }} \
            -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
            -e AWS_REGION=${{ secrets.AWS_REGION }} \
            -e JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }} \
            -e APP_URL=http://lumisnap.sytes.net \
            ${{ secrets.DOCKERHUB_USERNAME }}/login-ms:latest

          # Verificar que el contenedor esté en ejecución
          sudo docker ps | grep login-ms
          EOF
