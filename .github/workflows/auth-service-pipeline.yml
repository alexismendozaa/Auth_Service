name: CI-CD Auth Microservices

on:
  push:
    branches: [main, test]
    paths:
      - 'analysis-avatar-ms/**'
      - 'login-ms/**'
      - 'recovery-ms/**'
      - 'register-ms/**'
      - 'reset-ms/**'
  pull_request:
    branches: [main]
    paths:
      - 'analysis-avatar-ms/**'
      - 'login-ms/**'
      - 'recovery-ms/**'
      - 'register-ms/**'
      - 'reset-ms/**'

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - analysis-avatar-ms
          - login-ms
          - recovery-ms
          - register-ms
          - reset-ms
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Static syntax check for service
        run: |
          bash ${{ matrix.service }}/tests/check-static.sh

      - name: Build Docker image
        run: |
          docker build -t ${{ env.DOCKERHUB_USERNAME }}/${{ matrix.service }}:latest ./${{ matrix.service }}

      - name: Push Docker image
        run: |
          docker push ${{ env.DOCKERHUB_USERNAME }}/${{ matrix.service }}:latest

      # Limpia el contenedor antiguo antes de deploy
      - name: Clean up existing container on EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ github.ref_name == 'main' && secrets.EC2_PROD || secrets.EC2_QA }}
          username: ubuntu
          key: ${{ github.ref_name == 'main' && secrets.SSH_KEY_PROD || secrets.SSH_KEY_QA }}
          port: 22
          debug: true
          script: |
            docker rm -f ${{ matrix.service }} || true
            docker image rm ${{ env.DOCKERHUB_USERNAME }}/${{ matrix.service }}:latest || true

      # Despliega el microservicio actualizado
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ github.ref_name == 'main' && secrets.EC2_PROD || secrets.EC2_QA }}
          username: ubuntu
          key: ${{ github.ref_name == 'main' && secrets.SSH_KEY_PROD || secrets.SSH_KEY_QA }}
          port: 22
          debug: true
          script: |
            # Export environment variables comunes
            export DB_HOST='${{ secrets.DB_HOST }}'
            export DB_USER='${{ secrets.DB_USER }}'
            export DB_PASSWORD='${{ secrets.DB_PASSWORD }}'
            export DB_NAME='${{ secrets.DB_NAME }}'
            export JWT_SECRET='${{ secrets.JWT_SECRET }}'
            export JWT_EXPIRATION='${{ secrets.JWT_EXPIRATION }}'
            export S3_BUCKET_NAME='${{ secrets.S3_BUCKET_NAME }}'
            export AWS_REGION='${{ secrets.AWS_REGION }}'
            export SIGHTENGINE_API_KEY='${{ secrets.SIGHTENGINE_API_KEY }}'
            export SIGHTENGINE_API_USER='${{ secrets.SIGHTENGINE_API_USER }}'
            export EMAIL_USER='${{ secrets.EMAIL_USER }}'
            export EMAIL_PASS='${{ secrets.EMAIL_PASS }}'
            export APP_URL='${{ secrets.APP_URL }}'

            if [ "${{ matrix.service }}" = "analysis-avatar-ms" ]; then
              docker run -d --name analysis-avatar-ms \
                -p 5029:3029 \
                -e DB_HOST=$DB_HOST \
                -e DB_USER=$DB_USER \
                -e DB_PASSWORD=$DB_PASSWORD \
                -e DB_NAME=$DB_NAME \
                -e JWT_SECRET=$JWT_SECRET \
                -e JWT_EXPIRATION=$JWT_EXPIRATION \
                -e S3_BUCKET_NAME=$S3_BUCKET_NAME \
                -e AWS_REGION=$AWS_REGION \
                -e SIGHTENGINE_API_KEY=$SIGHTENGINE_API_KEY \
                -e SIGHTENGINE_API_USER=$SIGHTENGINE_API_USER \
                ${{ env.DOCKERHUB_USERNAME }}/analysis-avatar-ms:latest

            elif [ "${{ matrix.service }}" = "login-ms" ]; then
              docker run -d --name login-ms \
                -p 5001:3001 \
                -e DB_HOST=$DB_HOST \
                -e DB_USER=$DB_USER \
                -e DB_PASSWORD=$DB_PASSWORD \
                -e DB_NAME=$DB_NAME \
                -e JWT_SECRET=$JWT_SECRET \
                -e JWT_EXPIRATION=$JWT_EXPIRATION \
                -e S3_BUCKET_NAME=$S3_BUCKET_NAME \
                ${{ env.DOCKERHUB_USERNAME }}/login-ms:latest

            elif [ "${{ matrix.service }}" = "recovery-ms" ]; then
              docker run -d --name recovery-ms \
                -p 5002:3002 \
                -e DB_HOST=$DB_HOST \
                -e DB_USER=$DB_USER \
                -e DB_PASSWORD=$DB_PASSWORD \
                -e DB_NAME=$DB_NAME \
                -e EMAIL_USER=$EMAIL_USER \
                -e EMAIL_PASS=$EMAIL_PASS \
                -e APP_URL=$APP_URL \
                ${{ env.DOCKERHUB_USERNAME }}/recovery-ms:latest

            elif [ "${{ matrix.service }}" = "register-ms" ]; then
              docker run -d --name register-ms \
                -p 5025:3025 \
                -e DB_HOST=$DB_HOST \
                -e DB_USER=$DB_USER \
                -e DB_PASSWORD=$DB_PASSWORD \
                -e DB_NAME=$DB_NAME \
                -e JWT_SECRET=$JWT_SECRET \
                -e JWT_EXPIRATION=$JWT_EXPIRATION \
                -e S3_BUCKET_NAME=$S3_BUCKET_NAME \
                -e AWS_REGION=$AWS_REGION \
                ${{ env.DOCKERHUB_USERNAME }}/register-ms:latest

            elif [ "${{ matrix.service }}" = "reset-ms" ]; then
              docker run -d --name reset-ms \
                -p 5003:3003 \
                -e DB_HOST=$DB_HOST \
                -e DB_USER=$DB_USER \
                -e DB_PASSWORD=$DB_PASSWORD \
                -e DB_NAME=$DB_NAME \
                -e EMAIL_USER=$EMAIL_USER \
                -e EMAIL_PASS=$EMAIL_PASS \
                ${{ env.DOCKERHUB_USERNAME }}/reset-ms:latest
            fi
