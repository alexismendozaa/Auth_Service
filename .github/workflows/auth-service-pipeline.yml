name: CI-CD Auth Microservices

on:
  push:
    branches: [main, test]
    paths:
      - 'login-ms/**'
      - 'register-ms/**'
      - 'recovery-ms/**'
      - 'analysis-avatar-ms/**'
      - 'reset-ms/**'
  pull_request:
    branches: [main]
    paths:
      - 'login-ms/**'
      - 'register-ms/**'
      - 'recovery-ms/**'
      - 'analysis-avatar-ms/**'
      - 'reset-ms/**'

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  ### 1. TESTS ###
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - login-ms
          - register-ms
          - recovery-ms
          - analysis-avatar-ms
          - reset-ms
    steps:
      - uses: actions/checkout@v4

      - name: Detect changes for service
        id: changes
        run: |
          git fetch --prune --unshallow || git fetch --all
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            git fetch origin ${{ github.base_ref }}
            CHANGED=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep "^${{ matrix.service }}/" || true)
          else
            CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep "^${{ matrix.service }}/" || true)
          fi
          echo "changed=$([[ -n \"$CHANGED\" ]] && echo true || echo false)" >> $GITHUB_OUTPUT

      - name: Run static check
        if: steps.changes.outputs.changed == 'true'
        run: bash ${{ matrix.service }}/tests/check-static.sh

  ### 2. BUILD ###
  build:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        service:
          - login-ms
          - register-ms
          - recovery-ms
          - analysis-avatar-ms
          - reset-ms
    steps:
      - uses: actions/checkout@v4

      - name: Detect changes for service
        id: changes
        run: |
          git fetch --prune --unshallow || git fetch --all
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            git fetch origin ${{ github.base_ref }}
            CHANGED=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep "^${{ matrix.service }}/" || true)
          else
            CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep "^${{ matrix.service }}/" || true)
          fi
          echo "changed=$([[ -n \"$CHANGED\" ]] && echo true || echo false)" >> $GITHUB_OUTPUT

      - name: Build Docker image
        if: steps.changes.outputs.changed == 'true'
        run: docker build -t alexismendozaa/${{ matrix.service }}:latest ./${{ matrix.service }}

      - name: Save Docker image artifact
        if: steps.changes.outputs.changed == 'true'
        run: docker save alexismendozaa/${{ matrix.service }}:latest -o ${{ matrix.service }}.tar

      - uses: actions/upload-artifact@v4
        if: steps.changes.outputs.changed == 'true'
        with:
          name: ${{ matrix.service }}-image
          path: ${{ matrix.service }}.tar

  ### 3. PUSH ###
  push:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        service:
          - login-ms
          - register-ms
          - recovery-ms
          - analysis-avatar-ms
          - reset-ms
    steps:
      - uses: actions/checkout@v4

      - name: Detect changes for service
        id: changes
        run: |
          git fetch --prune --unshallow || git fetch --all
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            git fetch origin ${{ github.base_ref }}
            CHANGED=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep "^${{ matrix.service }}/" || true)
          else
            CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep "^${{ matrix.service }}/" || true)
          fi
          echo "changed=$([[ -n \"$CHANGED\" ]] && echo true || echo false)" >> $GITHUB_OUTPUT

      - uses: actions/download-artifact@v4
        if: steps.changes.outputs.changed == 'true'
        with:
          name: ${{ matrix.service }}-image

      - name: Load Docker image
        if: steps.changes.outputs.changed == 'true'
        run: docker load -i ${{ matrix.service }}.tar

      - name: Login to Docker Hub
        if: steps.changes.outputs.changed == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Push Docker image
        if: steps.changes.outputs.changed == 'true'
        run: docker push alexismendozaa/${{ matrix.service }}:latest

  ### 4A. DEPLOY QA ###
  deploy-qa:
    runs-on: ubuntu-latest
    needs: push
    if: github.ref == 'refs/heads/test'
    strategy:
      matrix:
        service:
          - login-ms
          - register-ms
          - recovery-ms
          - analysis-avatar-ms
          - reset-ms
    steps:
      - uses: actions/checkout@v4

      - name: Detect changes for service
        id: changes
        run: |
          git fetch --prune --unshallow || git fetch --all
          CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep "^${{ matrix.service }}/" || true)
          echo "changed=$([[ -n \"$CHANGED\" ]] && echo true || echo false)" >> $GITHUB_OUTPUT

      - name: Deploy updated microservice to EC2 QA via SSH
        if: steps.changes.outputs.changed == 'true'
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_QA }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY_QA }}
          port: 22
          script: |
            docker rm -f ${{ matrix.service }} || true

            export DB_HOST="${{ secrets.DB_HOST }}"
            export DB_USER="${{ secrets.DB_USER }}"
            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            export DB_NAME="${{ secrets.DB_NAME }}"
            export JWT_SECRET="${{ secrets.JWT_SECRET }}"
            export JWT_EXPIRATION="${{ secrets.JWT_EXPIRATION }}"
            export S3_BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}"
            export AWS_REGION="${{ secrets.AWS_REGION }}"
            export SIGHTENGINE_API_KEY="${{ secrets.SIGHTENGINE_API_KEY }}"
            export SIGHTENGINE_API_USER="${{ secrets.SIGHTENGINE_API_USER }}"
            export EMAIL_USER="${{ secrets.EMAIL_USER }}"
            export EMAIL_PASS="${{ secrets.EMAIL_PASS }}"
            export APP_URL="${{ secrets.APP_URL }}"

            if [ "${{ matrix.service }}" = "analysis-avatar-ms" ]; then
              docker run -d --name analysis-avatar-ms \
                -p 5029:3029 \
                -e DB_HOST="$DB_HOST" \
                -e DB_USER="$DB_USER" \
                -e DB_PASSWORD="$DB_PASSWORD" \
                -e DB_NAME="$DB_NAME" \
                -e JWT_SECRET="$JWT_SECRET" \
                -e JWT_EXPIRATION="$JWT_EXPIRATION" \
                -e S3_BUCKET_NAME="$S3_BUCKET_NAME" \
                -e AWS_REGION="$AWS_REGION" \
                -e SIGHTENGINE_API_KEY="$SIGHTENGINE_API_KEY" \
                -e SIGHTENGINE_API_USER="$SIGHTENGINE_API_USER" \
                alexismendozaa/analysis-avatar-ms:latest

            elif [ "${{ matrix.service }}" = "login-ms" ]; then
              docker run -d --name login-ms \
                -p 5001:3001 \
                -e DB_HOST="$DB_HOST" \
                -e DB_USER="$DB_USER" \
                -e DB_PASSWORD="$DB_PASSWORD" \
                -e DB_NAME="$DB_NAME" \
                -e JWT_SECRET="$JWT_SECRET" \
                -e JWT_EXPIRATION="$JWT_EXPIRATION" \
                -e S3_BUCKET_NAME="$S3_BUCKET_NAME" \
                -e AWS_REGION="$AWS_REGION" \
                alexismendozaa/login-ms:latest

            elif [ "${{ matrix.service }}" = "recovery-ms" ]; then
              docker run -d --name recovery-ms \
                -p 5002:3002 \
                -e DB_HOST="$DB_HOST" \
                -e DB_USER="$DB_USER" \
                -e DB_PASSWORD="$DB_PASSWORD" \
                -e DB_NAME="$DB_NAME" \
                -e EMAIL_USER="$EMAIL_USER" \
                -e EMAIL_PASS="$EMAIL_PASS" \
                -e APP_URL="$APP_URL" \
                alexismendozaa/recovery-ms:latest

            elif [ "${{ matrix.service }}" = "register-ms" ]; then
              docker run -d --name register-ms \
                -p 5025:3025 \
                -e DB_HOST="$DB_HOST" \
                -e DB_USER="$DB_USER" \
                -e DB_PASSWORD="$DB_PASSWORD" \
                -e DB_NAME="$DB_NAME" \
                -e JWT_SECRET="$JWT_SECRET" \
                -e JWT_EXPIRATION="$JWT_EXPIRATION" \
                -e S3_BUCKET_NAME="$S3_BUCKET_NAME" \
                -e AWS_REGION="$AWS_REGION" \
                alexismendozaa/register-ms:latest

            elif [ "${{ matrix.service }}" = "reset-ms" ]; then
              docker run -d --name reset-ms \
                -p 5003:3003 \
                -e DB_HOST="$DB_HOST" \
                -e DB_USER="$DB_USER" \
                -e DB_PASSWORD="$DB_PASSWORD" \
                -e DB_NAME="$DB_NAME" \
                -e EMAIL_USER="$EMAIL_USER" \
                -e EMAIL_PASS="$EMAIL_PASS" \
                alexismendozaa/reset-ms:latest
            fi

      - name: Copy Nginx config to QA
        if: steps.changes.outputs.changed == 'true'
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_QA }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY_QA }}
          port: 22
          source: "nginx/qa1_alexis_mendoza.conf"
          target: "/etc/nginx/sites-available/qa1_alexis_mendoza.conf"

      - name: Enable and reload Nginx on QA
        if: steps.changes.outputs.changed == 'true'
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_QA }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY_QA }}
          port: 22
          script: |
            sudo ln -sf /etc/nginx/sites-available/qa1_alexis_mendoza.conf \
                         /etc/nginx/sites-enabled/qa1_alexis_mendoza.conf
            sudo nginx -t && sudo systemctl reload nginx

  ### 4B. DEPLOY PROD ###
  deploy-prod:
    runs-on: ubuntu-latest
    needs: push
    if: (github.ref == 'refs/heads/main') || (github.event_name == 'pull_request')
    strategy:
      matrix:
        service:
          - login-ms
          - register-ms
          - recovery-ms
          - analysis-avatar-ms
          - reset-ms
    steps:
      - uses: actions/checkout@v4

      - name: Detect changes for service
        id: changes
        run: |
          git fetch --prune --unshallow || git fetch --all
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            git fetch origin ${{ github.base_ref }}
            CHANGED=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep "^${{ matrix.service }}/" || true)
          else
            CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep "^${{ matrix.service }}/" || true)
          fi
          echo "changed=$([[ -n \"$CHANGED\" ]] && echo true || echo false)" >> $GITHUB_OUTPUT

      - name: Deploy updated microservice to EC2 PROD via SSH
        if: steps.changes.outputs.changed == 'true'
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_PROD }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY_PROD }}
          port: 22
          script: |
            docker rm -f ${{ matrix.service }} || true

            export DB_HOST="${{ secrets.DB_HOST }}"
            export DB_USER="${{ secrets.DB_USER }}"
            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            export DB_NAME="${{ secrets.DB_NAME }}"
            export JWT_SECRET="${{ secrets.JWT_SECRET }}"
            export JWT_EXPIRATION="${{ secrets.JWT_EXPIRATION }}"
            export S3_BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}"
            export AWS_REGION="${{ secrets.AWS_REGION }}"
            export SIGHTENGINE_API_KEY="${{ secrets.SIGHTENGINE_API_KEY }}"
            export SIGHTENGINE_API_USER="${{ secrets.SIGHTENGINE_API_USER }}"
            export EMAIL_USER="${{ secrets.EMAIL_USER }}"
            export EMAIL_PASS="${{ secrets.EMAIL_PASS }}"
            export APP_URL="${{ secrets.APP_URL }}"

            if [ "${{ matrix.service }}" = "analysis-avatar-ms" ]; then
              docker run -d --name analysis-avatar-ms \
                -p 5029:3029 \
                -e DB_HOST="$DB_HOST" \
                -e DB_USER="$DB_USER" \
                -e DB_PASSWORD="$DB_PASSWORD" \
                -e DB_NAME="$DB_NAME" \
                -e JWT_SECRET="$JWT_SECRET" \
                -e JWT_EXPIRATION="$JWT_EXPIRATION" \
                -e S3_BUCKET_NAME="$S3_BUCKET_NAME" \
                -e AWS_REGION="$AWS_REGION" \
                -e SIGHTENGINE_API_KEY="$SIGHTENGINE_API_KEY" \
                -e SIGHTENGINE_API_USER="$SIGHTENGINE_API_USER" \
                alexismendozaa/analysis-avatar-ms:latest

            elif [ "${{ matrix.service }}" = "login-ms" ]; then
              docker run -d --name login-ms \
                -p 5001:3001 \
                -e DB_HOST="$DB_HOST" \
                -e DB_USER="$DB_USER" \
                -e DB_PASSWORD="$DB_PASSWORD" \
                -e DB_NAME="$DB_NAME" \
                -e JWT_SECRET="$JWT_SECRET" \
                -e JWT_EXPIRATION="$JWT_EXPIRATION" \
                -e S3_BUCKET_NAME="$S3_BUCKET_NAME" \
                -e AWS_REGION="$AWS_REGION" \
                alexismendozaa/login-ms:latest

            elif [ "${{ matrix.service }}" = "recovery-ms" ]; then
              docker run -d --name recovery-ms \
                -p 5002:3002 \
                -e DB_HOST="$DB_HOST" \
                -e DB_USER="$DB_USER" \
                -e DB_PASSWORD="$DB_PASSWORD" \
                -e DB_NAME="$DB_NAME" \
                -e EMAIL_USER="$EMAIL_USER" \
                -e EMAIL_PASS="$EMAIL_PASS" \
                -e APP_URL="$APP_URL" \
                alexismendozaa/recovery-ms:latest

            elif [ "${{ matrix.service }}" = "register-ms" ]; then
              docker run -d --name register-ms \
                -p 5025:3025 \
                -e DB_HOST="$DB_HOST" \
                -e DB_USER="$DB_USER" \
                -e DB_PASSWORD="$DB_PASSWORD" \
                -e DB_NAME="$DB_NAME" \
                -e JWT_SECRET="$JWT_SECRET" \
                -e JWT_EXPIRATION="$JWT_EXPIRATION" \
                -e S3_BUCKET_NAME="$S3_BUCKET_NAME" \
                -e AWS_REGION="$AWS_REGION" \
                alexismendozaa/register-ms:latest

            elif [ "${{ matrix.service }}" = "reset-ms" ]]; then
              docker run -d --name reset-ms \
                -p 5003:3003 \
                -e DB_HOST="$DB_HOST" \
                -e DB_USER="$DB_USER" \
                -e DB_PASSWORD="$DB_PASSWORD" \
                -e DB_NAME="$DB_NAME" \
                -e EMAIL_USER="$EMAIL_USER" \
                -e EMAIL_PASS="$EMAIL_PASS" \
                alexismendozaa/reset-ms:latest
            fi

      - name: Copy Nginx config to PROD
        if: steps.changes.outputs.changed == 'true'
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_PROD }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY_PROD }}
          port: 22
          source: "nginx/qa1_alexis_mendoza.conf"
          target: "/etc/nginx/sites-available/qa1_alexis_mendoza.conf"

      - name: Enable and reload Nginx on PROD
        if: steps.changes.outputs.changed == 'true'
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_PROD }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY_PROD }}
          port: 22
          script: |
            sudo ln -sf /etc/nginx/sites-available/qa1_alexis_mendoza.conf \
                         /etc/nginx/sites-enabled/qa1_alexis_mendoza.conf
            sudo nginx -t && sudo systemctl reload nginx
